# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: build_test_upload

on:
  push:
  pull_request:
    branches: [ "main" ]

jobs:
  build_test:
    name: Build source distribution and Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        # python-version: ["3.8", "3.9", "3.10"]
        python-version: ["3.8"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python3 -m pip install --upgrade pip
        python3 -m pip install flake8 pytest onnx onnxoptimizer networkx numpy
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --per-file-ignores="__init__.py: F401" --ignore=E501,W504
    - name: Build sdist
      run: python3 setup.py sdist
    - name: Install and test sdist bdist_wheel
      run: |
          ls
          cd dist
          python3 -m pip install *.tar.gz
          python3 -c "import onnx_hameln;"
          cd ..
          pytest test
    - uses: actions/upload-artifact@v2
      with:
        path: dist/*
    - uses: actions/download-artifact@v3
      with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist
  # build_wheels:
  #   env:
  #     CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
  #     CIBW_BEFORE_ALL_LINUX: WD=`pwd` && /opt/python/cp38-cp38/bin/python -m pip install cmake && cp /opt/_internal/cpython-3.8.13/bin/cmake /usr/local/bin/cmake && cmake --version && whereis cmake
  #     CIBW_BEFORE_ALL_MACOS: WD=`pwd` && pip install cmake
  #     CIBW_TEST_REQUIRES_LINUX: pytest onnx onnxoptimizer networkx numpy
  #     CIBW_TEST_REQUIRES_MACOS: pytest onnx onnxoptimizer networkx numpy
  #     CIBW_TEST_REQUIRES_WINDOWS: pytest onnx onnxoptimizer networkx numpy
  #     CIBW_BEFORE_TEST_LINUX: pip install pytest onnx onnxoptimizer networkx numpy
  #     CIBW_TEST_COMMAND: pytest {project}/test
  #     CIBW_TEST_COMMAND_LINUX: pytest {project}/test
  #     # Only build on Python 3 and skip 32-bit builds
  #     CIBW_BUILD: cp3?-*
  #   name: Build wheels on ${{ matrix.os }}
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       os: [ubuntu-20.04, windows-2019, macos-10.15]
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build wheels
  #     uses: pypa/cibuildwheel@v2.7.0
  #   - uses: actions/upload-artifact@v2
  #     with:
  #       path: ./wheelhouse/*.whl
  upload_pypi:
    name: Upload to PyPI
    needs: [build_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          # unpacks default artifact into dist/
          # if `name: artifact` is omitted, the action will create extra parent dir
          name: artifact
          path: dist
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags/v')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip_existing: true
          verbose: true
